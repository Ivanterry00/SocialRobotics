<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Move To" id="1" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="694" y="384"><bitmap>media/images/box/movement/walk_forward.png</bitmap><script language="4"><content><![CDATA[import almath
import math
from time import sleep

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy('ALMotion')
        self.tts = ALProxy('ALTextToSpeech')
        self.memory = ALProxy('ALMemory')
        # Initialize variables
        self.X=0.0
        self.Y=0.0
        self.signX = ""
        self.signY = ""

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onX(self, number):
        # Store the input number after casting it to float
        self.X= float(number)
        self.tts.say(str(self.X))

    def onInput_onY(self, number):
        # Store the input number after casting it to float
        self.Y= float(number)
        self.tts.say(str(self.Y))

    def onInput_onSignX(self, string):
        # Store the input string
        self.signX= string
        self.tts.say(self.signX)

    def onInput_onSignY(self, string):
        # Store the input string
        self.signY= string
        self.tts.say(self.signY)

    def onInput_onStart(self):
        if self.signX == "minus":
            self.X=-self.X
        if self.signY == "minus":
            self.Y=-self.Y

        # The robot says something to declare it is ready to start
        sentence = "I am ready to move to " + str(self.X) + ", " + str(self.Y)
        self.tts.say(sentence)

        # We get the initial position of the robot using the function getRobotPosition (world frame initialized where
        # the robot is switched on).
        currState = self.motion.getRobotPosition(True)


        # Store somewhere the expected end position that has been received by the dialogue box
        # Ignore the final angle: only the target x and y are required
        expectedEndPosition = [self.X, self.Y]
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)

        # Here we need to start with the control loop.
        # First step, we compute errX and errY
        errX = expectedEndPosition[0] - currState[0]
        errY = expectedEndPosition[1] - currState[1]
        self.logger.info("Error: " + str(errX) + ", " +  str(errY))

        # Repeat the control loop until the error along X or Y is greater that 0.2
        while (abs(errX) > 0.2
            or abs(errY) > 0.2):
            self.logger.info("State: " + str(currState) )
            self.logger.info("Curr: " + str(currState[0]) + ", " +str(currState[1]) + ", " +str(currState[2]) )
            self.logger.info("Expected: " + str(expectedEndPosition[0]) + ", " +  str(expectedEndPosition[1]))

            # compute the error between:
            # (1) the angle of the straight line connecting the current position to the goal position
            # (2) the current heading of the robot returned by the odometry
            # This will be the error we want to minimize during motion!

            theta_err= math.atan2(errY, errX) - currState[2]

            # Notice that the error might be greater that pi or smaller than -pi: if this happens,
            # we need to bring it back to the interval [-pi pi]
            while theta_err > 3.14:
                theta_err -= 6.28
            while theta_err < -3.14:
                theta_err += 6.28

            # Use the move function to control the robot.
            # (1) The velocity along the x-axis of the robot frame shall be a constant;
            # (2) The anguilar velocity shall be the agular error times a gain
            self.motion.move(0.1, 0, 0.2*theta_err)

            # Here we need to update the robot's current position through odometry, using the previous function
            currState = self.motion.getRobotPosition(True)

            # Here we need to update the error between the current and the target position
            errX = expectedEndPosition[0] - currState[0]
            errY = expectedEndPosition[1] - currState[1]
            self.logger.info("Dist: " + str(errX) + ", " +  str(errY))

            # Here we need to sleep, let's say 10ms! Otherwise, we might overload the processor.
            sleep(0.01)

        # We have reached the goal. Set all velocities to 0.
        self.motion.move(0.0, 0.0, 0.0)
        self.onInput_onStop()

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onX" type="2" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Input name="onY" type="2" type_size="1" nature="1" inner="0" tooltip="" id="5" /><Input name="onSignX" type="3" type_size="1" nature="1" inner="0" tooltip="" id="6" /><Input name="onSignY" type="3" type_size="1" nature="1" inner="0" tooltip="" id="7" /><Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="8" /><Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="9" /><Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="10" /><Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="11" /><Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="12" /><Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="13" /><Resource name="Legs" type="Lock" timeout="0" /></Box><Box name="Target" id="2" localization="8" tooltip="" x="316" y="239"><dialogFile>../Target/Target.dlg</dialogFile><bitmap>media/images/box/box-dialog.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="x" type="2" type_size="1" nature="2" inner="0" tooltip="" id="5" /><Output name="y" type="2" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Output name="signx" type="3" type_size="1" nature="2" inner="0" tooltip="" id="7" /><Output name="signy" type="3" type_size="1" nature="2" inner="0" tooltip="" id="8" /></Box><Box name="Delay" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="546" y="132"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" /><Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" /><Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" /><Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" /></Box><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="1" indexofinput="4" outputowner="2" indexofoutput="5" /><Link inputowner="1" indexofinput="5" outputowner="2" indexofoutput="6" /><Link inputowner="1" indexofinput="6" outputowner="2" indexofoutput="7" /><Link inputowner="1" indexofinput="7" outputowner="2" indexofoutput="8" /><Link inputowner="1" indexofinput="2" outputowner="14" indexofoutput="4" /><Link inputowner="14" indexofinput="2" outputowner="2" indexofoutput="5" /><Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="8" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="9" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>